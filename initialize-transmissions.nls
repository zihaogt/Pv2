to initialize-transmissions [trans-value partner-num]
  
  let p-sex 0
  let p-mix? false
  
  ifelse partner-num <= 3 ;; if sexual transmission
  [
    ifelse sex = 3 or sex = 6
    [ifelse mix? = true 
      [set p-sex sex - 2
        set p-mix?  true]
      [set p-sex sex]
    ]
    
    
    [ifelse sex = 1 or sex = 4
      [set p-sex  sex + 1]
      [set p-sex  sex - 1]
    ]
  ]
  [
    ;; if needle-sharing transmission
    let sex-IDU random-float 1 ;; using proportion of IDU in female male and MSM as weighting factor to determine sex  of newly infected person
    ifelse sex-IDU <= .28
    [set p-sex 4] 
    [ifelse sex-IDU <= .79
      [set p-sex 5]
      [set p-sex 6]
    ]  
  ]

    
  
  let p-partner-length 0
  let p-partner-counter 0
  
  if partner-num <= 2
    [set p-partner-length item (partner-num - 1) partner-length
      set p-partner-counter item (partner-num - 1) partner-counter
    ]
  
  let p-age (age - 3) + random 6 ;; transmits to a person 3 years younger or older 
  if age <= 19
  [set p-age (age - 1) + random 2]
  
;  if age <= 14 
;    [set p-age 13 + random 1]
;  if age > 14 and age <= 16
;    [set p-age 13 + random 3]
;  if age > 16 and age <= 19
;    [set p-age 13 + random 6]
  
  if p-age < 13
    [set p-age 13] 
  
  if p-age > 70
    [set p-age 70] 
  
  ask n-of (trans-value) people with [infected? = false]
    [ set xcor 10
      set ycor 10
      set age round (p-age)
      set sex p-sex 
      set-infected-variables
      
      if sex = 0 [ print "BLUNDER- SEX cant be 0"]
      set mix? p-mix?
      
      set infected? true
      set num-trans-One 0
      set num-trans-Two 0
      set num-trans-Casual 0
      set num-trans-Needle 0
      set-num-partners
      set-initial-partnership
      set index-patient? false
     ; set-next-test
      set stage 1 
      ifelse sex <= 3
     [ set sexual? true]
     [set sexual? false]
      
      
      if partner-num <= 2 ;; partner-num = 1 if main partner; 2 if concurrent partner; 3 if casual partner 
        [
          set partner-length replace-item (partner-num - 1) partner-length p-partner-length
          set partner-counter replace-item (partner-num  - 1) partner-counter p-partner-counter
          set partner-infected? replace-item (partner-num - 1) partner-infected? true
          set partner-array replace-item (partner-num - 1) partner-array 1
        ]
        if partner-num = 2 [ set in-concurrency  1]
      
      ;;MODELING CONCURRENCY
      
      ;; if 'this' newly infected partner had a concurrent partner who was also positive 
      ;; then since 'this' person is infected now the concurrent partner cannot infect so find that concurrent partner and set his/her partner as positive
      ;; if concurrent partner exists but not positive the transmission is handled in the procedure ' setup-trans-initial-ppl-HET-MSM'
      let other-partner 0; if concurrent, casual, or needle-sharing partner got infected
      if partner-num = 1 [ set other-partner 1]; ; if main partner got infected
      if (item other-partner partner-array = 1 and  item other-partner partner-infected? = true )
        [
          ; print 1
          ;randomly find another person who has a negative partner (and matching age and sex) and set that partner as positive
          let dummy-sex 0
          ifelse sex = 3 or sex = 6
          [set dummy-sex sex]
          [ifelse sex = 1 or sex = 4
            [set dummy-sex  sex + 1]
            [set dummy-sex  sex - 1]
          ]
          
          let individual one-of other people with 
          [infected? = true and item other-partner partner-array = 1 and item other-partner partner-infected? = false and age <= p-age + 10 and age >= p-age - 10 and sex = dummy-sex]
          
          ifelse individual != nobody 
          [ ask  individual 
            [
            set partner-infected? replace-item  other-partner partner-infected? true
            
            ]
            ; print "MATCH FOUND  FOR CONCURRENT PARTNER "
          ]
          [
            print "MATCH NOT FOUND FOR CONCURRENT PARTNER"
          ]
        ]
      
      if partner-num >= 3 ;; infected person is  a casual partner of the index person. Check if this guy has a concurrent partner as well
        [
          if (item 1 partner-array = 1 and  item 1 partner-infected? = true);;checking if newly infected person has a long term partner who is also positive
            [
              ;print 2
              ;randomly find another person who has a negative partner (and matching age and sex) and set that partner as positive
              let dummy-sex 0
              ifelse sex = 3 or sex = 6
              [set dummy-sex sex]
              [ifelse sex = 1 or sex = 4
                [set dummy-sex  sex + 1]
                [set dummy-sex  sex - 1]
              ]
              
              ;;Do not have to discount casual partners because in estimating transmssion to casual partners the prevalence is used to determine positive status
              ;; Though prevalence is used to set HIV status of main partners as well, it is done at beginning of partnership. Concurrency will 
              ;;change their status during the partnership
;              if random-float 1 < 0.25 ;; with certain probability this casual partner is another HIV positive person's casual partner as well
;              [let individual one-of other initial-people-HET-MSM with [infected? = true and age <= p-age + 10 and age >= p-age - 10 and sex = dummy-sex]
;                ifelse individual != nobody 
;                [ask individual
;                  [
;                    set casual-partner casual-partner - 1
;                  ]
;                ]
;                [
;                 ; print "MATCH NOT FOUND FOR CASUAL PARTNER"
;                ]
;              ]
              ;;'this' casual partner could have a long-term partner as well. SO check if that long term partner is positive
              ;;If so, since'this' person is infected now the long-term partner cannot infect 
              ;; if concurrent partner exists but not positive the transmission is handled in the procedure ' setup-trans-initial-ppl-HET-MSM'
              let individual one-of other people with 
              [infected? = true and item 1 partner-array = 1 and item 1 partner-infected? = false and age <= p-age + 10 and age >= p-age - 10 and sex = dummy-sex]
              ifelse individual != nobody 
              [
                ask individual [
                  set partner-infected? replace-item 1 partner-infected? true
                ]
                ;print "MATCH FOUND FOR MAIN PARTNER"
              ]
              [
                print "MATCH NOT FOUND FOR MAIN PARTNER"
              ]
            ]
        ]
      
      
      ;]
   ]
end

