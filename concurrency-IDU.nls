to set-initial-num-IDU-partners

  set IDU-ptnr-positive n-values max-ptnr [0]
  set IDU-ptnr-shared IDU-ptnr-positive
  ifelse needle-sharing? = true
  [set num-IDU-ptnr random length (IDU-ptnr-positive) + 1]
  [set num-IDU-ptnr 0]
  
  let ind 0 
 ;print total-IDU-prevalence
  while [ind < num-IDU-ptnr]
  [if random-float 1 <= IDU-sharing-prevalence
    [set IDU-ptnr-positive replace-item ind IDU-ptnr-positive 1]
    set ind ind + 1
  ]

end

to set-trans-num-IDU-partners [partner-num]
  
  set IDU-ptnr-positive n-values max-ptnr [0]
  set IDU-ptnr-shared IDU-ptnr-positive
  
  ifelse partner-num >= length (IDU-ptnr-positive) - 1 or random-float 1 <= percent-IDU-sharing
  [set needle-sharing? true
    set num-IDU-ptnr random length (IDU-ptnr-positive) + 1]
  [set needle-sharing? false
    set num-IDU-ptnr 0
  ] 
    
  let ind 0 

  ifelse partner-num >= length (IDU-ptnr-positive) - 1
  [while [ind < num-IDU-ptnr - 1]
    [if random-float 1 <= IDU-sharing-prevalence
      [set IDU-ptnr-positive replace-item ind IDU-ptnr-positive 1]
      set ind ind + 1
    ]
    set IDU-ptnr-positive replace-item (num-IDU-ptnr - 1) IDU-ptnr-positive 1
  ]
  [while [ind < num-IDU-ptnr]
    [if random-float 1 <= IDU-sharing-prevalence 
      [set IDU-ptnr-positive replace-item ind IDU-ptnr-positive 1]
      set ind ind + 1
    ]
  ]
    
  
end

to  setup-trans-initial-ppl-IDU  
  ;;;;;;;;;;needle sharing
  
  if stage < 2 and ticks > sim-dry-run
  [print "error: acute"
    print stage]
  
  let num-needles (random-float 1 * (num-needles-max - num-needles-min) + num-needles-min) / time-unit
  let needles-shared 0
  
  ifelse needle-sharing? ;; if sharing needles with others
  [set needles-shared num-needles * percent-needles-shared];; x% of needles shared 
  [set needles-shared 0]
  
  let trans-needle trans-rate-needle 
  ;if stage = 1 
  ;[set trans-needle trans-rate-needle * acute-rate-increase-base]
  if stage = 6 
  [set trans-needle trans-rate-needle * (1 - reduction-VLS-needle-trans-rate)]
  if stage = 3
  [set needles-shared needles-shared * (1 - reduction-aware-needles)]
  if stage = 4
  [set needles-shared needles-shared * (1 - reduction-noART-needles)]
  if stage >= 5
  [set needles-shared needles-shared * (1 - reduction-ART-needles)]
  
  let ind 0
  let num-IDU-ptnr-shared 0
  while [ind < length (IDU-ptnr-positive)]
  [if random-float 1 <= prob-ptnr-sharing
    [set num-IDU-ptnr-shared num-IDU-ptnr-shared + 1
      set IDU-ptnr-shared replace-item ind IDU-ptnr-shared 1]
    set ind ind + 1
  ]
  
  let needles-shared-per-ptnr 0
  if num-IDU-ptnr-shared > 0
  [set needles-shared-per-ptnr round (needles-shared / num-IDU-ptnr-shared)]
  
  ;print "needles shared per ptnr is " 
  ;print needles-shared-per-ptnr
   
  set ind 0
  while [ind < length (IDU-ptnr-positive)]
  [if item ind IDU-ptnr-shared = 1 and item ind IDU-ptnr-positive = 0
    [if random-float 1 <= 1 - ((1 - trans-needle) ^ needles-shared-per-ptnr)
      [set num-trans-Needle num-trans-Needle + 1
      ;print 1 - ((1 - trans-needle) ^ needles-shared-per-ptnr)
      ]
    ] 
    set ind ind + 1
  ]
  
end

;; This is the Bernoulli model for estimating transmission for those in acute phase 
to  setup-trans-IDU-acute [week]
  
  if stage > 1
  [print "error, not acute"
  print stage]
  
  let adjust-time 52 / 12 ;; for weekly transmissions instead of month  
  let week-rate-increase item (week - 1) acute-rate-increase-week;; higher transmission in acute stage
  ifelse sex = 6
  ; [ set acute-rate-increase item (week - 1) [12.0  12  12.0  12.0  12     12   12   12  1.0  1.0  1.0  1.0]] ;; MSM: higher transmission in acute stage
  [set week-rate-increase item (week - 1) acute-rate-increase-week-MSM] ;; MSM: higher transmission in acute stage
  ;[ set acute-rate-increase item (week - 1) [1.0  8.5  12.0  12.0  11.4  9.2  5.8  1.5  1.0  1.0  1.0  1.0]] ;; MSM: higher transmission in acute stage
  [set week-rate-increase item (week - 1) acute-rate-increase-week-HET];; HET: higher transmission in acute stage
  
  ;;;;;;;;;;needle sharing
  let num-needles (random-float 1 * (num-needles-max - num-needles-min) + num-needles-min) / (time-unit * adjust-time)
  ;print num-needles
  let needles-shared 0
  
  ifelse needle-sharing? ;; x% share needles
  [set needles-shared num-needles * percent-needles-shared];; x% of needles shared 
  [set needles-shared 0]
  
  
  let trans-needle trans-rate-needle
  
  if stage = 1 
  [set trans-needle trans-rate-needle * week-rate-increase]
;  if stage = 6 
;  [set trans-needle trans-rate-needle * (1 - reduction-VLS-needle-trans-rate)]
;  if stage = 3
;  [set needles-shared needles-shared * (1 - reduction-aware-needles)]
;  if stage = 4
;  [set needles-shared needles-shared * (1 - reduction-noART-needles)]
;  if stage >= 5
;  [set needles-shared needles-shared * (1 - reduction-ART-needles)]
  
  let ind 0
  let num-ptnr-shared 0  
  while [ind < length (IDU-ptnr-positive)]
  [if random-float 1 <= prob-ptnr-sharing
    [set num-ptnr-shared num-ptnr-shared + 1
      set IDU-ptnr-shared replace-item ind IDU-ptnr-shared 1]
    set ind ind + 1
  ]
  
  let needles-shared-per-ptnr 0
  if num-ptnr-shared > 0
  [set needles-shared-per-ptnr round (needles-shared / num-ptnr-shared)]
  ;print needles-shared-per-ptnr
  
  set ind 0
  while [ind < length (IDU-ptnr-positive)]
  [if item ind IDU-ptnr-shared = 1 and item ind IDU-ptnr-positive = 0
      [if random-float 1 <= 1 - ((1 - trans-needle) ^ needles-shared-per-ptnr)
        [set num-trans-Needle num-trans-Needle + 1]
      ]
    set ind ind + 1
  ]
  
  ;print num-trans-Needle
  
end

;; maintaing proportion of individuals in concurrent partnerships
